import React, { useState } from 'react';
import { FileText, TrendingUp, Calendar, DollarSign, Users, BarChart3, ChevronDown } from 'lucide-react';
import { mockAnalytics } from '../../data/mockData';
import { useTheme } from '../../contexts/ThemeContext';

type ReportType = {
  id: string;
  name: string;
  icon: React.ComponentType<{ className?: string }>;
  description: string;
};

const Reports: React.FC = () => {
  const { theme } = useTheme();
  const [selectedReport, setSelectedReport] = useState('overview');
  const [dateRange, setDateRange] = useState('this_month');

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-ZA', {
      style: 'currency',
      currency: 'ZAR',
      minimumFractionDigits: 0
    }).format(amount);
  };

  const reportTypes = [
    { id: 'overview', name: 'Overview', icon: BarChart3, description: 'Key metrics and performance indicators' },
    { id: 'financial', name: 'Financial Report', icon: DollarSign, description: 'Revenue, payments, and financial analysis' },
    { id: 'cases', name: 'Cases Report', icon: FileText, description: 'Case statistics and completion rates' },
    { id: 'clients', name: 'Client Report', icon: Users, description: 'Client demographics and relationships' },
    { id: 'services', name: 'Services Report', icon: Calendar, description: 'Service types and scheduling analysis' },
    { id: 'performance', name: 'Performance Report', icon: TrendingUp, description: 'Staff performance and efficiency metrics' }
  ] as const;

  const renderOverviewReport = () => (
    <div className="space-y-6">
      {/* Key Metrics */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
        <div className={`bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg p-4 md:p-6 text-white shadow-md transition-all duration-200 ${
          theme === 'dark' ? 'shadow-blue-900/30' : 'shadow-blue-500/20'
        }`}>
          <div className="flex items-center justify-between">
            <div>
              <p className="text-blue-100 text-sm md:text-base">Total Cases</p>
              <p className="text-2xl md:text-3xl font-bold">{mockAnalytics.totalCases}</p>
            </div>
            <FileText className="w-7 h-7 md:w-8 md:h-8 text-blue-200" />
          </div>
        </div>
        <div className={`bg-gradient-to-r from-green-500 to-green-600 rounded-lg p-4 md:p-6 text-white shadow-md transition-all duration-200 ${
          theme === 'dark' ? 'shadow-green-900/30' : 'shadow-green-500/20'
        }`}>
          <div className="flex items-center justify-between">
            <div>
              <p className="text-green-100 text-sm md:text-base">Total Revenue</p>
              <p className="text-2xl md:text-3xl font-bold">{formatCurrency(mockAnalytics.totalRevenue)}</p>
            </div>
            <DollarSign className="w-7 h-7 md:w-8 md:h-8 text-green-200" />
          </div>
        </div>
        <div className={`bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg p-4 md:p-6 text-white shadow-md transition-all duration-200 ${
          theme === 'dark' ? 'shadow-purple-900/30' : 'shadow-purple-500/20'
        }`}>
          <div className="flex items-center justify-between">
            <div>
              <p className="text-purple-100 text-sm md:text-base">Active Cases</p>
              <p className="text-2xl md:text-3xl font-bold">{mockAnalytics.activeCases}</p>
            </div>
            <TrendingUp className="w-7 h-7 md:w-8 md:h-8 text-purple-200" />
          </div>
        </div>
        <div className={`bg-gradient-to-r from-orange-500 to-orange-600 rounded-lg p-4 md:p-6 text-white shadow-md transition-all duration-200 ${
          theme === 'dark' ? 'shadow-orange-900/30' : 'shadow-orange-500/20'
        }`}>
          <div className="flex items-center justify-between">
            <div>
              <p className="text-orange-100 text-sm md:text-base">Completion Rate</p>
              <p className="text-2xl md:text-3xl font-bold">{mockAnalytics.taskCompletionRate}%</p>
            </div>
            <BarChart3 className="w-7 h-7 md:w-8 md:h-8 text-orange-200" />
          </div>
        </div>
      </div>

      {/* Charts Section */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
        <div className={`rounded-lg shadow-sm border p-6 transition-colors duration-200 ${
          theme === 'dark' ? 'bg-gray-800 border-gray-700' : 'bg-white border-slate-200'
        }`}>
          <h3 className={`text-lg font-semibold mb-4 ${
            theme === 'dark' ? 'text-white' : 'text-slate-900'
          }`}>
            Service Types Distribution
          </h3>
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <span className={theme === 'dark' ? 'text-gray-300' : 'text-slate-600'}>
                Burial Services
              </span>
              <div className="flex items-center space-x-2">
                <div className={`w-32 rounded-full h-2 ${
                  theme === 'dark' ? 'bg-gray-700' : 'bg-slate-200'
                }`}>
                  <div className="bg-blue-500 h-2 rounded-full" style={{ width: '45%' }} />
                </div>
                <span className={`text-sm font-medium ${
                  theme === 'dark' ? 'text-gray-300' : 'text-slate-700'
                }`}>
                  45%
                </span>
              </div>
            </div>
            <div className="flex items-center justify-between">
              <span className={theme === 'dark' ? 'text-gray-300' : 'text-slate-600'}>
                Cremation Services
              </span>
              <div className="flex items-center space-x-2">
                <div className={`w-32 rounded-full h-2 ${
                  theme === 'dark' ? 'bg-gray-700' : 'bg-slate-200'
                }`}>
                  <div className="bg-green-500 h-2 rounded-full" style={{ width: '35%' }} />
                </div>
                <span className={`text-sm font-medium ${
                  theme === 'dark' ? 'text-gray-300' : 'text-slate-700'
                }`}>
                  35%
                </span>
              </div>
            </div>
            <div className="flex items-center justify-between">
              <span className={theme === 'dark' ? 'text-gray-300' : 'text-slate-600'}>
                Memorial Services
              </span>
              <div className="flex items-center space-x-2">
                <div className={`w-32 rounded-full h-2 ${
                  theme === 'dark' ? 'bg-gray-700' : 'bg-slate-200'
                }`}>
                  <div className="bg-purple-500 h-2 rounded-full" style={{ width: '20%' }} />
                </div>
                <span className={`text-sm font-medium ${
                  theme === 'dark' ? 'text-gray-300' : 'text-slate-700'
                }`}>
                  20%
                </span>
              </div>
            </div>
          </div>
        </div>

        <div className={`rounded-lg shadow-sm border p-6 transition-colors duration-200 ${
          theme === 'dark' ? 'bg-gray-800 border-gray-700' : 'bg-white border-slate-200'
        }`}>
          <h3 className={`text-lg font-semibold mb-4 ${
            theme === 'dark' ? 'text-white' : 'text-slate-900'
          }`}>
            Monthly Revenue Trend
          </h3>
          <div className="space-y-4">
            {[
              { month: 'January', amount: 150000 },
              { month: 'February', amount: 185000 },
              { month: 'March', amount: 220000 },
              { month: 'April', amount: 195000 },
            ].map((item, index) => (
              <div key={index} className="flex items-center justify-between">
                <span className={theme === 'dark' ? 'text-gray-300' : 'text-slate-600'}>
                  {item.month}
                </span>
                <span className={`font-medium ${
                  theme === 'dark' ? 'text-white' : 'text-slate-900'
                }`}>
                  {formatCurrency(item.amount)}
                </span>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );

  const renderFinancialReport = () => {
    const cardClass = `rounded-lg shadow-sm border p-6 transition-colors duration-200 ${
      theme === 'dark' ? 'bg-gray-800 border-gray-700' : 'bg-white border-slate-200'
    }`;
    
    const textClass = (isBold = false) => {
      if (isBold) {
        return theme === 'dark' ? 'text-white' : 'text-slate-900';
      }
      return theme === 'dark' ? 'text-gray-300' : 'text-slate-600';
    };

    const statusColor = (status: string) => {
      const colors = {
        completed: theme === 'dark' ? 'text-green-400' : 'text-green-600',
        pending: theme === 'dark' ? 'text-yellow-400' : 'text-yellow-600',
        failed: theme === 'dark' ? 'text-red-400' : 'text-red-600',
        refunded: theme === 'dark' ? 'text-gray-400' : 'text-gray-600',
      };
      return colors[status.toLowerCase() as keyof typeof colors] || '';
    };

    return (
      <div className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {/* Payment Methods */}
          <div className={cardClass}>
            <h3 className={`text-lg font-semibold mb-4 ${textClass(true)}`}>
              Payment Methods
            </h3>
            <div className="space-y-3">
              {[
                { method: 'EFT', amount: 500000 },
                { method: 'Card', amount: 350000 },
                { method: 'EasyPay', amount: 250000 },
                { method: 'SnapScan', amount: 150000 },
              ].map((item, index) => (
                <div key={index} className="flex justify-between">
                  <span className={textClass()}>
                    {item.method}
                  </span>
                  <span className={`font-medium ${textClass(true)}`}>
                    {formatCurrency(item.amount)}
                  </span>
                </div>
              ))}
            </div>
          </div>

          {/* Payment Status */}
          <div className={cardClass}>
            <h3 className={`text-lg font-semibold mb-4 ${textClass(true)}`}>
              Payment Status
            </h3>
            <div className="space-y-3">
              {[
                { status: 'Completed', amount: 1100000, type: 'completed' },
                { status: 'Pending', amount: 100000, type: 'pending' },
                { status: 'Failed', amount: 25000, type: 'failed' },
                { status: 'Refunded', amount: 25000, type: 'refunded' },
              ].map((item, index) => (
                <div key={index} className="flex justify-between">
                  <span className={textClass()}>
                    {item.status}
                  </span>
                  <span className={`font-medium ${statusColor(item.type)}`}>
                    {formatCurrency(item.amount)}
                  </span>
                </div>
              ))}
            </div>
          </div>

          {/* Key Metrics */}
          <div className={cardClass}>
            <h3 className={`text-lg font-semibold mb-4 ${textClass(true)}`}>
              Key Metrics
            </h3>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className={textClass()}>
                  Avg Case Value
                </span>
                <span className={`font-medium ${textClass(true)}`}>
                  {formatCurrency(mockAnalytics.avgCaseValue)}
                </span>
              </div>
              <div className="flex justify-between">
                <span className={textClass()}>
                  Monthly Revenue
                </span>
                <span className={`font-medium ${textClass(true)}`}>
                  {formatCurrency(mockAnalytics.monthlyRevenue)}
                </span>
              </div>
              <div className="flex justify-between">
                <span className={textClass()}>
                  Pending Payments
                </span>
                <span className={`font-medium ${statusColor('pending')}`}>
                  {mockAnalytics.pendingPayments}
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const renderReportContent = () => {
    const reportCard = (title: string, description: string) => (
      <div className={`rounded-lg shadow-sm border p-6 transition-colors duration-200 ${
        theme === 'dark' ? 'bg-gray-800 border-gray-700' : 'bg-white border-slate-200'
      }`}>
        <h3 className={`text-lg font-semibold mb-4 ${
          theme === 'dark' ? 'text-white' : 'text-slate-900'
        }`}>
          {title}
        </h3>
        <p className={theme === 'dark' ? 'text-gray-300' : 'text-slate-600'}>
          {description}
        </p>
      </div>
    );

    switch (selectedReport) {
      case 'overview':
        return renderOverviewReport();
      case 'financial':
        return renderFinancialReport();
      case 'cases':
        return reportCard('Cases Analysis', 'Detailed case statistics and analysis will be displayed here.');
      case 'clients':
        return reportCard('Client Demographics', 'Client relationship and demographic analysis will be displayed here.');
      case 'services':
        return reportCard('Services Analysis', 'Service scheduling and type analysis will be displayed here.');
      case 'performance':
        return reportCard('Performance Metrics', 'Staff performance and efficiency metrics will be displayed here.');
      default:
        return renderOverviewReport();
    }
  };

  return (
    <div className="max-w-7xl mx-auto p-4 sm:p-6 md:p-8">
      <div className="flex flex-col sm:flex-row gap-3">
        <h1 className={`text-2xl font-bold ${
          theme === 'dark' ? 'text-white' : 'text-slate-900'
        }`}>
          Reports
        </h1>
        <p className={theme === 'dark' ? 'text-gray-300' : 'text-slate-600'}>
          View and analyze your business performance
        </p>
      </div>
              onChange={(e) => setDateRange(e.target.value)}
              className={`appearance-none pl-3 pr-8 py-2 rounded-md border ${
                theme === 'dark'
                  ? 'bg-gray-800 border-gray-700 text-white'
                  : 'bg-white border-slate-300 text-slate-700'
              } focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent`}
            >
              <option value="today">Today</option>
              <option value="yesterday">Yesterday</option>
              <option value="this_week">This Week</option>
              <option value="last_week">Last Week</option>
              <option value="this_month">This Month</option>
              <option value="last_month">Last Month</option>
              <option value="this_year">This Year</option>
              <option value="custom">Custom Range</option>
            </select>
            <div className="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
              <ChevronDown className={`w-4 h-4 ${theme === 'dark' ? 'text-gray-400' : 'text-slate-500'}`} />
            </div>
          </div>
          <button
            className={`px-4 py-2 rounded-md flex items-center gap-2 ${
              theme === 'dark'
                ? 'bg-blue-600 hover:bg-blue-700 text-white'
                : 'bg-blue-600 hover:bg-blue-700 text-white'
            } transition-colors`}
          >
            <span>Export</span>
            <svg
              className="w-4 h-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"
              />
            </svg>
          </button>
        </div>
      </div>

      {/* Report Type Selection */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4">
        {reportTypes.map((report) => {
          const Icon = report.icon;
          return (
            <button
              key={report.id}
              onClick={() => setSelectedReport(report.id)}
              className={`flex flex-col items-center justify-center p-4 rounded-lg border transition-colors ${
                selectedReport === report.id
                  ? theme === 'dark'
                    ? 'bg-blue-600 border-blue-700 text-white'
                    : 'bg-blue-100 border-blue-200 text-blue-700'
                  : theme === 'dark'
                  ? 'bg-gray-800 border-gray-700 hover:bg-gray-700 text-white'
                  : 'bg-white border-slate-200 hover:bg-slate-50 text-slate-700'
              }`}
            >
              <Icon className="w-6 h-6 mb-2" />
              <span className="text-sm font-medium">{report.name}</span>
            </button>
          );
        })}
                    isSelected
                      ? 'text-blue-900 dark:text-blue-100'
                      : theme === 'dark'
                        ? 'text-gray-200'
                        : 'text-slate-900'
                  }`}>
                    {report.name}
                  </h4>
                </div>
                <p className={`text-sm ${
                  isSelected
                    ? 'text-blue-800 dark:text-blue-200'
                    : theme === 'dark'
                      ? 'text-gray-400'
                      : 'text-slate-600'
                }`}>
                  {report.description}
                </p>
              </button>
            );
          })}
        </div>
      </div>

      {/* Report Content */}
      {renderReportContent()}
    </div>
  );
};

export default Reports;